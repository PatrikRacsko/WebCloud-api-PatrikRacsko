/*
 * Simple Inventory API
 *
 * This is a simple API
 *
 * OpenAPI spec version: 3.0.0
 * Contact: you@your-company.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace eu.incloud.ambulance.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Ward : IEquatable<Ward>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [Required]
        [DataMember(Name="id")]
        public string Id { get; set; }

        /// <summary>
        /// Gets or Sets ward
        /// </summary>
        [Required]
        [DataMember(Name="ward")]
        public string ward { get; set; }

        /// <summary>
        /// Gets or Sets PatientIds
        /// </summary>
        [Required]
        [DataMember(Name="patientIds")]
        public List<string> PatientIds { get; set; }

        /// <summary>
        /// Gets or Sets MaxCapacity
        /// </summary>
        [Required]
        [DataMember(Name="maxCapacity")]
        public int? MaxCapacity { get; set; }

        /// <summary>
        /// Gets or Sets ActualCapacity
        /// </summary>
        [Required]
        [DataMember(Name="actualCapacity")]
        public int? ActualCapacity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Ward {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  ward: ").Append(ward).Append("\n");
            sb.Append("  PatientIds: ").Append(PatientIds).Append("\n");
            sb.Append("  MaxCapacity: ").Append(MaxCapacity).Append("\n");
            sb.Append("  ActualCapacity: ").Append(ActualCapacity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Ward)obj);
        }

        /// <summary>
        /// Returns true if Ward instances are equal
        /// </summary>
        /// <param name="other">Instance of Ward to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Ward other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    ward == other.ward ||
                    ward != null &&
                    ward.Equals(other.ward)
                ) && 
                (
                    PatientIds == other.PatientIds ||
                    PatientIds != null &&
                    PatientIds.Equals(other.PatientIds)
                ) && 
                (
                    MaxCapacity == other.MaxCapacity ||
                    MaxCapacity != null &&
                    MaxCapacity.Equals(other.MaxCapacity)
                ) && 
                (
                    ActualCapacity == other.ActualCapacity ||
                    ActualCapacity != null &&
                    ActualCapacity.Equals(other.ActualCapacity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (ward != null)
                    hashCode = hashCode * 59 + ward.GetHashCode();
                    if (PatientIds != null)
                    hashCode = hashCode * 59 + PatientIds.GetHashCode();
                    if (MaxCapacity != null)
                    hashCode = hashCode * 59 + MaxCapacity.GetHashCode();
                    if (ActualCapacity != null)
                    hashCode = hashCode * 59 + ActualCapacity.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Ward left, Ward right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Ward left, Ward right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
